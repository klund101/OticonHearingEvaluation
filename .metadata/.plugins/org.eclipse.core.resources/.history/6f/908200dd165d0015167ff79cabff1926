package com.example.hearing_evaluation;

import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;

import org.puredata.core.PdBase;

import com.github.mikephil.charting.charts.LineChart;
import com.github.mikephil.charting.components.YAxis;
import com.github.mikephil.charting.data.Entry;
import com.github.mikephil.charting.data.LineData;
import com.github.mikephil.charting.data.LineDataSet;

import android.support.v7.app.ActionBarActivity;
import android.content.Intent;
import android.graphics.Color;
import android.os.Bundle;
import android.util.Log;
import android.view.KeyEvent;
import android.view.Menu;
import android.view.MenuItem;
import android.view.View;
import android.view.View.OnClickListener;
import android.widget.Button;

public class ResultActivity extends IdentityActivity implements OnClickListener {
	
	Button backToMenuButton;
	
	private LineChart mChart;
	public String passed_uName;
	String date;
	
	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.activity_result);
		
        initGui();
        
        Intent iin = getIntent();
        Bundle b = iin.getExtras();

        if (b != null) {
        	passed_uName  = (String) b.get("name_test"); // get user name from TestActivity
        }
        
//////////MPchart
    	
	//LineChart chart = (LineChart) findViewById(R.id.chart);
	mChart = (LineChart) findViewById(R.id.chart);
	// enable value highlighting
	mChart.setHighlightEnabled(false);

	// enable touch gestures
	mChart.setTouchEnabled(true);

	// enable scaling and dragging
	mChart.setDragEnabled(true);
	mChart.setScaleEnabled(false);
	// mChart.setScaleXEnabled(true);
	// mChart.setScaleYEnabled(true);

 	// if disabled, scaling can be done on x- and y-axis separately
 	mChart.setPinchZoom(false);
 
 	// x-axis limit line
 	// LimitLine llXAxis = new LimitLine(10f, "Index 10");
 	// llXAxis.setLineWidth(4f);
	// llXAxis.enableDashedLine(10f, 10f, 0f);
	// llXAxis.setLabelPosition(LimitLabelPosition.RIGHT_BOTTOM);
 	// llXAxis.setTextSize(10f);
 	//
	// XAxis xAxis = mChart.getXAxis();
	// xAxis.addLimitLine(llXAxis);
 
 	YAxis leftAxis = mChart.getAxisLeft();
 	YAxis rightAxis = mChart.getAxisRight();
 
 	leftAxis.setAxisMaxValue(10f);
 	rightAxis.setAxisMaxValue(10f);
 	leftAxis.setStartAtZero(false);
 	rightAxis.setStartAtZero(false);
 	leftAxis.setAxisMinValue(-120f);
 	rightAxis.setAxisMinValue(-120f);
 
	// XAxis xAxis = mChart.getXAxis();
 
 	// xAxis.setAxisMaxValue(120f);
	// xAxis.setAxisMinValue(0f);
	//	
	setData(20,1);
	
	mChart.setVisibleXRangeMinimum(0f);
	mChart.setVisibleXRangeMaximum(8000);
//	mChart.setVisibleYRangeMaximum(0f,leftAxis);
//	mChart.setVisibleYRangeMaximum(8000);
	//Log.d("username", uNameString);
	
	date = new SimpleDateFormat("HH:mm:ss MM/dd-yyyy").format(new Date());
	mChart.setDescription(passed_uName + ", " + date); // set user name on audiogram
	//////////	
		
	}
	
    //////////MPchart
    private void setData(int count, float range) {

        ArrayList<String> xVals = new ArrayList<String>();
        for (int i = 0; i < count; i++) {
            xVals.add((i*500) + "");
            Log.d("xval", String.valueOf(xVals));
        }

        ArrayList<Entry> yVals = new ArrayList<Entry>();

        for (int i = 0; i < count; i++) {

            float mult = (range + 1);
            float val = (float) (Math.random() * mult) - 20;// + (float)
                                                           // ((mult *
                                                           // 0.1) / 10);
            //Log.d("yval", String.valueOf(val));
            yVals.add(new Entry(val, i));
        }

        // create a dataset and give it a type
        LineDataSet set1 = new LineDataSet(yVals, "Normal hearing");
        // set1.setFillAlpha(110);
        // set1.setFillColor(Color.RED);

        // set the line to be drawn like this "- - - - - -"
        set1.enableDashedLine(10f, 5f, 0f);
        set1.setColor(Color.RED);
        set1.setCircleColor(Color.TRANSPARENT);
        set1.setLineWidth(1f);
        set1.setCircleSize(3f);
        set1.setDrawCircleHole(false);
        set1.setValueTextSize(9f);
        set1.setDrawValues(false);
        set1.setFillAlpha(65);
        set1.setFillColor(Color.BLACK);
//        set1.setDrawFilled(true);
        // set1.setShader(new LinearGradient(0, 0, 0, mChart.getHeight(),
        // Color.BLACK, Color.WHITE, Shader.TileMode.MIRROR));

        ArrayList<LineDataSet> dataSets = new ArrayList<LineDataSet>();
        dataSets.add(set1); // add the datasets

        // create a data object with the datasets
        LineData data = new LineData(xVals, dataSets);
        
        // set data
        mChart.setData(data);
    }

//	@Override
//	public boolean onCreateOptionsMenu(Menu menu) {
//		// Inflate the menu; this adds items to the action bar if it is present.
//		getMenuInflater().inflate(R.menu.result, menu);
//		return true;
//	}
//
//	@Override
//	public boolean onOptionsItemSelected(MenuItem item) {
//		// Handle action bar item clicks here. The action bar will
//		// automatically handle clicks on the Home/Up button, so long
//		// as you specify a parent activity in AndroidManifest.xml.
//		int id = item.getItemId();
//		if (id == R.id.action_settings) {
//			return true;
//		}
//		return super.onOptionsItemSelected(item);
//	}
    
	@Override
	public boolean onKeyDown(int keyCode, KeyEvent event) {
	    if (keyCode == KeyEvent.KEYCODE_VOLUME_DOWN
	            || keyCode == KeyEvent.KEYCODE_VOLUME_DOWN)
	        return true;
	    else
	        return true;
	}
	
	@Override
	public boolean onKeyUp(int keyCode, KeyEvent event) {
	    if (keyCode == KeyEvent.KEYCODE_VOLUME_UP 
	    		|| keyCode == KeyEvent.KEYCODE_VOLUME_DOWN)
	    	return true;
		else
			return true;
	}
	
	private void initGui() {
		backToMenuButton = (Button) findViewById(R.id.btnBackToMenu);
		backToMenuButton.setOnClickListener(this);
	}
	
	@Override
	public void onClick(View v) {
		switch (v.getId()) {
		case R.id.btnBackToMenu:
			startActivity(new Intent(ResultActivity.this, MainActivity.class)); // 
		break;
		}
	}

}
